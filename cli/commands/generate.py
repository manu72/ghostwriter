import typer
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt

from core.adapters.openai_adapter import OpenAIAdapter
from core.storage import AuthorStorage, get_author_profile

console = Console()
generate_app = typer.Typer()


@generate_app.command("text")
def generate_text(
    author_id: str = typer.Argument(..., help="Author ID to generate text for"),
    prompt: str = typer.Option(
        None, "--prompt", "-p", help="Prompt for text generation"
    ),
    max_completion_tokens: int = typer.Option(
        500, "--max-tokens", help="Maximum tokens to generate"
    ),
):
    """‚úçÔ∏è  Generate text using a fine-tuned model."""

    profile = get_author_profile(author_id)
    if not profile:
        console.print(f"[red]Author '{author_id}' not found.[/red]")
        raise typer.Exit(1)

    storage = AuthorStorage(author_id)
    metadata = storage.load_model_metadata()

    # Find latest successful model
    job = metadata.get_latest_successful_job()
    if not job or not job.fine_tuned_model:
        console.print(f"[red]No fine-tuned model found for '{author_id}'.[/red]")
        console.print(f"Use 'ghostwriter train start {author_id}' to create one.")
        raise typer.Exit(1)

    model_id = job.fine_tuned_model

    # Get prompt if not provided
    if not prompt:
        prompt = Prompt.ask("Enter your prompt")

    console.print(f"\n[yellow]Prompt:[/yellow] {prompt}")
    console.print(f"[dim]Using model: {model_id}[/dim]")

    try:
        adapter = OpenAIAdapter()
        response = adapter.generate_text(model_id, prompt, max_completion_tokens)

        console.print(
            Panel(
                response, title=f"‚úçÔ∏è  Generated by {profile.name}", border_style="green"
            )
        )

    except ValueError as e:
        # Configuration error
        console.print(f"[red]Configuration error: {e}[/red]")
        raise typer.Exit(1)
    except Exception as e:
        console.print(f"[red]Error generating text: {str(e)}[/red]")
        raise typer.Exit(1)


@generate_app.command("interactive")
def interactive_generation(
    author_id: str = typer.Argument(..., help="Author ID for interactive generation"),
):
    """üéØ Interactive text generation session."""

    profile = get_author_profile(author_id)
    if not profile:
        console.print(f"[red]Author '{author_id}' not found.[/red]")
        raise typer.Exit(1)

    storage = AuthorStorage(author_id)
    metadata = storage.load_model_metadata()

    # Find latest successful model
    job = metadata.get_latest_successful_job()
    if not job or not job.fine_tuned_model:
        console.print(f"[red]No fine-tuned model found for '{author_id}'.[/red]")
        console.print(f"Use 'ghostwriter train start {author_id}' to create one.")
        raise typer.Exit(1)

    model_id = job.fine_tuned_model

    console.print(
        Panel(
            f"[bold blue]Interactive Generation Session[/bold blue]\n\n"
            f"Author: {profile.name}\n"
            f"Model: {model_id}\n\n"
            f"Type 'quit' or 'exit' to end the session.",
            title="üéØ Generation Mode",
        )
    )

    try:
        adapter = OpenAIAdapter()

        while True:
            prompt = Prompt.ask("\n[cyan]Enter your prompt[/cyan]")

            if prompt.lower() in ["quit", "exit", "q"]:
                console.print("[green]Session ended.[/green]")
                break

            if not prompt.strip():
                console.print("[yellow]Please enter a prompt.[/yellow]")
                continue

            try:
                response = adapter.generate_text(
                    model_id, prompt, max_completion_tokens=500
                )
                console.print(
                    Panel(
                        response,
                        title=f"‚úçÔ∏è  {profile.name}",
                        border_style="green",
                    )
                )
            except Exception as e:
                console.print(f"[red]Error generating text: {str(e)}[/red]")

    except ValueError as e:
        # Configuration error
        console.print(f"[red]Configuration error: {e}[/red]")
        raise typer.Exit(1)
    except KeyboardInterrupt:
        console.print("\n[green]Session ended.[/green]")
    except Exception as e:
        console.print(f"[red]Error in interactive session: {str(e)}[/red]")
        raise typer.Exit(1)
